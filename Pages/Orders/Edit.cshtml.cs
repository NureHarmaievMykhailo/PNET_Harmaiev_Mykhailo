using AutoWorkshopWeb.Data;
using AutoWorkshopWeb.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace AutoWorkshopWeb.Pages.Orders;

public class EditModel : PageModel
{
    private readonly WorkshopContext _context;
    private readonly ILogger<EditModel> _logger;

    public EditModel(WorkshopContext context, ILogger<EditModel> logger)
    {
        _context = context;
        _logger = logger;
    }

    [BindProperty]
    public Order Order { get; set; } = default!;

    public SelectList Cars { get; set; } = default!;
    public SelectList Services { get; set; } = default!;
    public SelectList Statuses { get; set; } = default!;

    public async Task<IActionResult> OnGetAsync(int? id)
    {
        if (id == null)
            return NotFound();

        Order = await _context.Orders
            .Include(o => o.Car)
            .Include(o => o.Service)
            .FirstOrDefaultAsync(o => o.OrderId == id);

        if (Order == null)
            return NotFound();

        Cars = new SelectList(_context.Cars.Include(c => c.Client), "CarId", "LicensePlate");
        Services = new SelectList(_context.Services, "ServiceId", "Name");
        Statuses = new SelectList(new[] { "–ü—Ä–∏–π–Ω—è—Ç–æ", "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" });

        return Page();
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (!ModelState.IsValid)
        {
            Cars = new SelectList(_context.Cars.Include(c => c.Client), "CarId", "LicensePlate");
            Services = new SelectList(_context.Services, "ServiceId", "Name");
            Statuses = new SelectList(new[] { "–ü—Ä–∏–π–Ω—è—Ç–æ", "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" });
            return Page();
        }

        // üîç –û—Ç—Ä–∏–º–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ë–î, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞—Ç—É
        var existingOrder = await _context.Orders.AsNoTracking().FirstOrDefaultAsync(o => o.OrderId == Order.OrderId);
        if (existingOrder == null)
            return NotFound();

        // ‚ùó –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        Order.OrderDate = existingOrder.OrderDate;

        _context.Attach(Order).State = EntityState.Modified;

        // üëâ –ó–∞–ø–∏—Å –ª–æ–≥—ñ–≤
        _context.ServiceLogs.Add(new ServiceLog
        {
            ServiceId = Order.ServiceId,
            OperationType = "Edit",
            Message = $"–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ID={Order.OrderId}, —Å—Ç–∞—Ç—É—Å: {Order.Status}",
            LogDate = DateTime.Now
        });

        await _context.SaveChangesAsync();

        _logger.LogInformation("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID={OrderId} –æ–Ω–æ–≤–ª–µ–Ω–æ. –ê–≤—Ç–æ ID={CarId}, –ü–æ—Å–ª—É–≥–∞ ID={ServiceId}, –°—Ç–∞—Ç—É—Å={Status}",
            Order.OrderId, Order.CarId, Order.ServiceId, Order.Status);

        return RedirectToPage("Index");
    }
}
